// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: helloworld.proto
#ifndef GRPC_helloworld_2eproto__INCLUDED
#define GRPC_helloworld_2eproto__INCLUDED

#include "helloworld.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace helloworld {

class Greeter GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status myOpen(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>> AsyncmyOpen(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>>(AsyncmyOpenRaw(context, request, cq));
    }
    virtual ::grpc::Status myClose(::grpc::ClientContext* context, const ::helloworld::HelloFlushRequest& request, ::helloworld::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>> AsyncmyClose(::grpc::ClientContext* context, const ::helloworld::HelloFlushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>>(AsyncmyCloseRaw(context, request, cq));
    }
    virtual ::grpc::Status myOpendir(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloOpendir* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloOpendir>> AsyncmyOpendir(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloOpendir>>(AsyncmyOpendirRaw(context, request, cq));
    }
    virtual ::grpc::Status myReaddir(::grpc::ClientContext* context, const ::helloworld::HelloDir& request, ::helloworld::HelloDirent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloDirent>> AsyncmyReaddir(::grpc::ClientContext* context, const ::helloworld::HelloDir& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloDirent>>(AsyncmyReaddirRaw(context, request, cq));
    }
    virtual ::grpc::Status myGetattr(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloStat* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloStat>> AsyncmyGetattr(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloStat>>(AsyncmyGetattrRaw(context, request, cq));
    }
    virtual ::grpc::Status myReleasedir(::grpc::ClientContext* context, const ::helloworld::HelloDir& request, ::helloworld::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>> AsyncmyReleasedir(::grpc::ClientContext* context, const ::helloworld::HelloDir& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>>(AsyncmyReleasedirRaw(context, request, cq));
    }
    virtual ::grpc::Status myMkdir(::grpc::ClientContext* context, const ::helloworld::HelloDirent& request, ::helloworld::HelloMkdirReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloMkdirReply>> AsyncmyMkdir(::grpc::ClientContext* context, const ::helloworld::HelloDirent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloMkdirReply>>(AsyncmyMkdirRaw(context, request, cq));
    }
    virtual ::grpc::Status myRmdir(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloMkdirReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloMkdirReply>> AsyncmyRmdir(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloMkdirReply>>(AsyncmyRmdirRaw(context, request, cq));
    }
    virtual ::grpc::Status myUnlink(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloMkdirReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloMkdirReply>> AsyncmyUnlink(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloMkdirReply>>(AsyncmyUnlinkRaw(context, request, cq));
    }
    virtual ::grpc::Status myMknod(::grpc::ClientContext* context, const ::helloworld::HelloMknodRequest& request, ::helloworld::HelloMkdirReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloMkdirReply>> AsyncmyMknod(::grpc::ClientContext* context, const ::helloworld::HelloMknodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloMkdirReply>>(AsyncmyMknodRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>* AsyncmyOpenRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>* AsyncmyCloseRaw(::grpc::ClientContext* context, const ::helloworld::HelloFlushRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloOpendir>* AsyncmyOpendirRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloDirent>* AsyncmyReaddirRaw(::grpc::ClientContext* context, const ::helloworld::HelloDir& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloStat>* AsyncmyGetattrRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>* AsyncmyReleasedirRaw(::grpc::ClientContext* context, const ::helloworld::HelloDir& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloMkdirReply>* AsyncmyMkdirRaw(::grpc::ClientContext* context, const ::helloworld::HelloDirent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloMkdirReply>* AsyncmyRmdirRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloMkdirReply>* AsyncmyUnlinkRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloMkdirReply>* AsyncmyMknodRaw(::grpc::ClientContext* context, const ::helloworld::HelloMknodRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status myOpen(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>> AsyncmyOpen(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>>(AsyncmyOpenRaw(context, request, cq));
    }
    ::grpc::Status myClose(::grpc::ClientContext* context, const ::helloworld::HelloFlushRequest& request, ::helloworld::HelloReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>> AsyncmyClose(::grpc::ClientContext* context, const ::helloworld::HelloFlushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>>(AsyncmyCloseRaw(context, request, cq));
    }
    ::grpc::Status myOpendir(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloOpendir* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloOpendir>> AsyncmyOpendir(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloOpendir>>(AsyncmyOpendirRaw(context, request, cq));
    }
    ::grpc::Status myReaddir(::grpc::ClientContext* context, const ::helloworld::HelloDir& request, ::helloworld::HelloDirent* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloDirent>> AsyncmyReaddir(::grpc::ClientContext* context, const ::helloworld::HelloDir& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloDirent>>(AsyncmyReaddirRaw(context, request, cq));
    }
    ::grpc::Status myGetattr(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloStat* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloStat>> AsyncmyGetattr(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloStat>>(AsyncmyGetattrRaw(context, request, cq));
    }
    ::grpc::Status myReleasedir(::grpc::ClientContext* context, const ::helloworld::HelloDir& request, ::helloworld::HelloReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>> AsyncmyReleasedir(::grpc::ClientContext* context, const ::helloworld::HelloDir& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>>(AsyncmyReleasedirRaw(context, request, cq));
    }
    ::grpc::Status myMkdir(::grpc::ClientContext* context, const ::helloworld::HelloDirent& request, ::helloworld::HelloMkdirReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloMkdirReply>> AsyncmyMkdir(::grpc::ClientContext* context, const ::helloworld::HelloDirent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloMkdirReply>>(AsyncmyMkdirRaw(context, request, cq));
    }
    ::grpc::Status myRmdir(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloMkdirReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloMkdirReply>> AsyncmyRmdir(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloMkdirReply>>(AsyncmyRmdirRaw(context, request, cq));
    }
    ::grpc::Status myUnlink(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloMkdirReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloMkdirReply>> AsyncmyUnlink(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloMkdirReply>>(AsyncmyUnlinkRaw(context, request, cq));
    }
    ::grpc::Status myMknod(::grpc::ClientContext* context, const ::helloworld::HelloMknodRequest& request, ::helloworld::HelloMkdirReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloMkdirReply>> AsyncmyMknod(::grpc::ClientContext* context, const ::helloworld::HelloMknodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloMkdirReply>>(AsyncmyMknodRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* AsyncmyOpenRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* AsyncmyCloseRaw(::grpc::ClientContext* context, const ::helloworld::HelloFlushRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloOpendir>* AsyncmyOpendirRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloDirent>* AsyncmyReaddirRaw(::grpc::ClientContext* context, const ::helloworld::HelloDir& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloStat>* AsyncmyGetattrRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* AsyncmyReleasedirRaw(::grpc::ClientContext* context, const ::helloworld::HelloDir& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloMkdirReply>* AsyncmyMkdirRaw(::grpc::ClientContext* context, const ::helloworld::HelloDirent& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloMkdirReply>* AsyncmyRmdirRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloMkdirReply>* AsyncmyUnlinkRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloMkdirReply>* AsyncmyMknodRaw(::grpc::ClientContext* context, const ::helloworld::HelloMknodRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_SayHello_;
    const ::grpc::RpcMethod rpcmethod_myOpen_;
    const ::grpc::RpcMethod rpcmethod_myClose_;
    const ::grpc::RpcMethod rpcmethod_myOpendir_;
    const ::grpc::RpcMethod rpcmethod_myReaddir_;
    const ::grpc::RpcMethod rpcmethod_myGetattr_;
    const ::grpc::RpcMethod rpcmethod_myReleasedir_;
    const ::grpc::RpcMethod rpcmethod_myMkdir_;
    const ::grpc::RpcMethod rpcmethod_myRmdir_;
    const ::grpc::RpcMethod rpcmethod_myUnlink_;
    const ::grpc::RpcMethod rpcmethod_myMknod_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response);
    virtual ::grpc::Status myOpen(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response);
    virtual ::grpc::Status myClose(::grpc::ServerContext* context, const ::helloworld::HelloFlushRequest* request, ::helloworld::HelloReply* response);
    virtual ::grpc::Status myOpendir(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloOpendir* response);
    virtual ::grpc::Status myReaddir(::grpc::ServerContext* context, const ::helloworld::HelloDir* request, ::helloworld::HelloDirent* response);
    virtual ::grpc::Status myGetattr(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloStat* response);
    virtual ::grpc::Status myReleasedir(::grpc::ServerContext* context, const ::helloworld::HelloDir* request, ::helloworld::HelloReply* response);
    virtual ::grpc::Status myMkdir(::grpc::ServerContext* context, const ::helloworld::HelloDirent* request, ::helloworld::HelloMkdirReply* response);
    virtual ::grpc::Status myRmdir(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloMkdirReply* response);
    virtual ::grpc::Status myUnlink(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloMkdirReply* response);
    virtual ::grpc::Status myMknod(::grpc::ServerContext* context, const ::helloworld::HelloMknodRequest* request, ::helloworld::HelloMkdirReply* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    std::unique_ptr< ::grpc::RpcService> service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestSayHello(::grpc::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestmyOpen(::grpc::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestmyClose(::grpc::ServerContext* context, ::helloworld::HelloFlushRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestmyOpendir(::grpc::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloOpendir>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestmyReaddir(::grpc::ServerContext* context, ::helloworld::HelloDir* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloDirent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestmyGetattr(::grpc::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloStat>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestmyReleasedir(::grpc::ServerContext* context, ::helloworld::HelloDir* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestmyMkdir(::grpc::ServerContext* context, ::helloworld::HelloDirent* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloMkdirReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestmyRmdir(::grpc::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloMkdirReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestmyUnlink(::grpc::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloMkdirReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestmyMknod(::grpc::ServerContext* context, ::helloworld::HelloMknodRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloMkdirReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace helloworld


#endif  // GRPC_helloworld_2eproto__INCLUDED
